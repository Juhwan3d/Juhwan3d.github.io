<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://juhwan3d.github.io/</id><title>Juhwan Studio</title><subtitle>Juhwan's individual studio.</subtitle> <updated>2025-07-06T19:42:51+09:00</updated> <author> <name>JUHWAN YOON</name> <uri>https://juhwan3d.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://juhwan3d.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://juhwan3d.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 JUHWAN YOON </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>가사 모음</title><link href="https://juhwan3d.github.io/posts/quietTime/" rel="alternate" type="text/html" title="가사 모음" /><published>2023-06-08T00:00:00+09:00</published> <updated>2023-06-08T00:00:00+09:00</updated> <id>https://juhwan3d.github.io/posts/quietTime/</id> <content src="https://juhwan3d.github.io/posts/quietTime/" /> <author> <name>JUHWAN YOON</name> </author> <category term="Private" /> <summary> 쓰다 남은 위로라면 그냥 지나가도 돼 사랑없이 사는 것도 들먹이진 말아줘 나를 보면 지금보다 울먹이지 말도록 결혼 - 문문 특별하다고 한 너는 사실 똑같더라고 특별함이 하나 둘 모이면 평범함이 되고 우두커니 서서 세상을 가만히 내려다보면 비극은 언제나 발 뻗고 잘 때쯤 찾아온단다 아아아아 슬퍼라 김철수 씨 이야기 - 허회경 난 몇마디의 말과 몇 번의 손짓에 또 몇개의 표정과 흐르는 마음에 울고 웃는 그런 나약한 인간일 뿐인데 대체 내게서 뭐를 더 바라나요 한계 - 백예린 </summary> </entry> <entry><title>[Algorithm] 분할 정복 (Divide &amp; Conquer)</title><link href="https://juhwan3d.github.io/posts/divide-conquer/" rel="alternate" type="text/html" title="[Algorithm] 분할 정복 (Divide &amp; Conquer)" /><published>2023-01-12T00:00:00+09:00</published> <updated>2023-01-17T12:08:08+09:00</updated> <id>https://juhwan3d.github.io/posts/divide-conquer/</id> <content src="https://juhwan3d.github.io/posts/divide-conquer/" /> <author> <name>JUHWAN YOON</name> </author> <category term="Public" /> <summary> ‘프로그래밍 대회에서 배우는 알고리즘 문제해결 전략 - 구종만’ 참조 분할 정복이란 분할 정복이란 말그대로 문제를 분할한 뒤 정복하는 알고리즘 디자인 패러다임이다. 다시 말하자면, 주어진 문제를 둘 이상의 부분 문제로 분할한 뒤 재귀 호출을 이용해 각 부분 문제를 계산하고, 각 부분 문제의 답으로부터 전체 문제의 답을 계산해 내는 방식이다. 단, 각 부분 문제의 크기를 거의 비슷하게 분할한다는 점이 일반적인 재귀 호출과는 다른 점이다. 분할정복을 사용하는 알고리즘은 대게 세 가지의 구성요소를 가지고 있다. 문제를 더 작은 문제로 분할하는 과정(divide) 각 문제에 대해 구한 답을 원래 문제에 대한 답으로 병합하는 과정(merge) 더이상 답을 분할하지 않고 곧장 풀 수 있는 매... </summary> </entry> <entry><title>[Algorithm] algospot 문제 풀이 (문제 ID: PICNIC)</title><link href="https://juhwan3d.github.io/posts/picnic/" rel="alternate" type="text/html" title="[Algorithm] algospot 문제 풀이 (문제 ID: PICNIC)" /><published>2023-01-11T00:00:00+09:00</published> <updated>2023-01-12T15:35:25+09:00</updated> <id>https://juhwan3d.github.io/posts/picnic/</id> <content src="https://juhwan3d.github.io/posts/picnic/" /> <author> <name>JUHWAN YOON</name> </author> <category term="Public" /> <summary> ‘프로그래밍 대회에서 배우는 알고리즘 문제해결 전략 - 구종만’ 참조 문제 링크 문제 풀이 과정 알고리즘의 기본이라고 할 수 있는 완전탐색 알고리즘(브루트 포스) 문제이다. 재귀 함수를 이용해 완전탐색을 구현했다. 처음엔 함수를 다음과 같이 구성했다. void countPairing(vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;&amp;amp; pairTable, vector&amp;lt;int&amp;gt;&amp;amp; students, int&amp;amp; ret, bool isPair) { if (!isPair) return; if (students.empty() &amp;amp;&amp;amp; isPair) { ret++; return; } for (int i = 0; i &amp;lt; students.size()... </summary> </entry> <entry><title>[Algorithm] 백준 문제 풀이 (1002번 터렛)</title><link href="https://juhwan3d.github.io/posts/turret/" rel="alternate" type="text/html" title="[Algorithm] 백준 문제 풀이 (1002번 터렛)" /><published>2023-01-04T00:00:00+09:00</published> <updated>2023-01-05T16:06:38+09:00</updated> <id>https://juhwan3d.github.io/posts/turret/</id> <content src="https://juhwan3d.github.io/posts/turret/" /> <author> <name>JUHWAN YOON</name> </author> <category term="Public" /> <summary> 문제 링크 문제 풀이 과정 이전에 알고리즘 공부를 시작하면서 구종만님의 _‘프로그래밍 대회에서 배우는 알고리즘 문제해결전략 (일명 종만북)’_으로 알고리즘 공부를 해보려고 했지만.. 베이스가 전혀 없는 상태로 시작하려니 어렵고 내용이 와닿지도 않았다.. 그래서 우선 쉬운 문제부터 풀어보면서 코딩이 좀 익숙해진 다음에 다시 책을 보기로 했다. 터렛이라는 제목을 가진 이 문제는 단순히 두 원의 중심좌표 (x1, y1), (x2, y2)와 반지름 r1, r2가 주어질 때 두 원의 교점의 수를 계산하는 문제이다. 두 원의 위치관계는 다음 중 하나일 것이다. 두 원의 중심과 반지름이 서로 같은 경우 -&amp;gt; 교점이 무한대 두 원의 중심 사이의 거리가 각 반지름의 합보다 작고 차보다 클 때 (... </summary> </entry> <entry><title>[Algorithm] 백준 문제 풀이 (2798번 블랙잭)</title><link href="https://juhwan3d.github.io/posts/blackjack/" rel="alternate" type="text/html" title="[Algorithm] 백준 문제 풀이 (2798번 블랙잭)" /><published>2023-01-04T00:00:00+09:00</published> <updated>2023-01-05T16:06:38+09:00</updated> <id>https://juhwan3d.github.io/posts/blackjack/</id> <content src="https://juhwan3d.github.io/posts/blackjack/" /> <author> <name>JUHWAN YOON</name> </author> <category term="Public" /> <summary> 문제 링크 문제 풀이 과정 이 문제는 이전에 종만북에서 살짝 공부했던 완전탐색 알고리즘을 써서 푸는 문제다. (물론 다른 방법도 있겠지만 브루트포스 알고리즘 카테고리에 있었다.) 완전탐색 문제인 만큼 재귀함수를 이용해 풀기로 했다. base case는 다음과 같이 설정했다. 카드 3장의 합이 M보다 클 때 -&amp;gt; 최대합을 업데이트하지 않고 그대로 반환한다. 카드 3장의 합이 M보다 작거나 같을 때 -&amp;gt; 최대합과 비교하여 둘중 큰 값으로 최대합을 업데이트하고 반환한다. 완전탐색 알고리즘은 아주 기초적인 알고리즘이기에 어렵지 않게 풀 수 있었다. 재귀함수를 설계하는건 늘 어려워서 고민을 하긴 했지만 이전에 공부했던 구조대로 코드를 구성하니 나름 수월하게 풀 수 있었다. 전체 ... </summary> </entry> </feed>
